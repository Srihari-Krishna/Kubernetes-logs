apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: kube-system
data:
  fluent-bit.conf: |
    [SERVICE]
        Flush        1
        Log_Level    info
        Parsers_File parsers.conf
        Lua_File     level_router.lua
        Lua_Debug    On

    # 1) Read your generator's JSON directly
    [INPUT]
        Name        tail
        Path        /var/lib/docker/containers/*/*.log
        Parser      json
        Tag         raw.logs

    # 2) Call Lua to pick out "level" and set record["new_tag"]
    [FILTER]
        Name        lua
        Match       raw.logs
        Script      level_router.lua
        Call        route_by_level

    # 3) Rewrite the tag to whatever new_tag was
    [FILTER]
        Name        rewrite_tag
        Match       raw.logs
        Rule        $new_tag ^(.*)$ $1 true

    # 4) Send each level to its own Kafka topic
    [OUTPUT]
        Name        kafka
        Match       level.info
        Brokers     10.30.201.222:9092
        Topics      info-logs

    [OUTPUT]
        Name        kafka
        Match       level.warn
        Brokers     10.30.201.222:9092
        Topics      warn-logs

    [OUTPUT]
        Name        kafka
        Match       level.error
        Brokers     10.30.201.222:9092
        Topics      error-logs

    # (optional) catch anything else
    [OUTPUT]
        Name        kafka
        Match       *
        Brokers     10.30.201.222:9092
        Topics      kube-logs

  parsers.conf: |
    [PARSER]
        Name   json
        Format json

  level_router.lua: |

    function route_by_level(tag, timestamp, record)

        local lvl = record["log"]
        local lvl2 = lvl["level"] or "didnt_find"
        if string.find(lvl, "info", 1, true) then
            record["new_tag"] = "level.info"
        elseif string.find(lvl, "warn", 1, true) then
            record["new_tag"] = "level.warn"
        elseif string.find(lvl, "error", 1, true) then
            record["new_tag"] = "level.error"
        else
            record["new_tag"] = "level.other"
        end

        return 1, timestamp, record
    end



